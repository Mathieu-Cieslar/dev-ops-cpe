name: Build and Deploy

on:
  workflow_run:
    workflows: ["Test Backend"]
    branches:
      - main
    types:
      - completed
  push:
    branches:
      - main

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-22.04
    if: github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: write  # üî• Autorise le push dans le repo

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Get current version from pom.xml
        id: version
        run: |
          VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" tp-1/java/simple-api-student/pom.xml)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION=${{ env.VERSION }}
          NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF++; print}')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update pom.xml with new version
        run: |
          sed -i "s|<version>${{ env.VERSION }}</version>|<version>${{ env.NEW_VERSION }}</version>|g" tp-1/java/simple-api-student/pom.xml

      - name: Commit and push new version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add tp-1/java/simple-api-student/pom.xml
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}
          git push origin main --tags

      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: tp-1/java/simple-api-student
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backend-cpe:${{ env.NEW_VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/backend-cpe:latest
          push: true

      - name: Build and push database image
        uses: docker/build-push-action@v3
        with:
          context: tp-1/database
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/database-cpe:${{ env.NEW_VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/database-cpe:latest
          push: true

      - name: Build and push httpd image
        uses: docker/build-push-action@v3
        with:
          context: tp-1/httpd
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/httpd-cpe:${{ env.NEW_VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/httpd-cpe:latest
          push: true

      - name: Build and push front image
        uses: docker/build-push-action@v3
        with:
          context: tp-3/devops-front
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend-cpe:${{ env.NEW_VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend-cpe:latest
          push: true

  deploy-to-production:
    runs-on: ubuntu-22.04
    needs: build-and-push-docker-image  # Attends la fin du build avant de se lancer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST_CPE }} >> ~/.ssh/known_hosts

      - name: Recreate .env.yml file
        run: |
          echo "${{ secrets.ENV_YML }}" > ansible/.env.yml
          chmod 600 ansible/.env.yml
          cat ansible/.env.yml  # Debug: V√©rifie si le fichier est bien cr√©√©

      - name: Deploy to Production
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook -i inventory/hosts.ini ansible/deploy.yml \
            --private-key ~/.ssh/id_rsa \
            -u admin \
            -vv
